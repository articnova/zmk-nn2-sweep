/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3
#define MOD 4 

/ {
        behaviors {        
                Z_OSLSYM: tap_dance_0 {            
                        compatible = "zmk,behavior-tap-dance";            
                        label = "TAP_DANCE_OSLSYM";            
                        #binding-cells = <0>;            
                        tapping-term-ms = <200>;            
                        bindings = <&kp Z>, <&slm SYM>;        
                };    

                ly: layers {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LAYERS TAP HOLD";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&mo>, <&to>;
                };

                slm: behavior_sticky_layer {
			compatible = "zmk,behavior-sticky-key";
			label = "STICKY_LAYER";
			#binding-cells = <1>;
			release-after-ms = <1000>;
			bindings = <&mo>;
			ignore-modifiers;
		};
        };

        combos {
                compatible = "zmk,combos";

                // both left thumb keys
                combo_OSLSYM {
                        timeout-ms = <200>;
                        key-positions = <30 31>;
                        bindings = <&slm SYM>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ENTER |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  SHFT  |
//                   | MOD | BKSP|   | SPC | SYMNAV |
                        bindings = <
   &kp Q      &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P
   &kp A      &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &mt LALT ENTER
   &kp Z      &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp LSHIFT
                          &mo MOD &kp BSPC   &kp SPACE &ly NAV SYM
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// | ESC |  `  |  ;  |  /  |  ?  |   |  {  |  }  |  &  |  *  |  #  |
// | TAB |  -  |  _  |  =  |  +  |   |  [  |  ]  |  $  |  %  |  ^  |
// | SHFT|  '  |  "  |  !  |  \  |   |  (  |  )  |  |  |  @  |  Â£  |
//                   | DEF | DEL |   | ENT | ALT |
                        bindings = <
   &kp ESC      &kp GRAVE  &kp SEMI   &kp FSLH   &kp QMARK        &kp LBRC   &kp RBRC   &kp AMPS              &kp STAR    &kp NON_US_HASH
   &kp TAB      &kp MINUS  &kp UNDER  &kp EQUAL  &kp PLUS         &kp LBKT   &kp RBKT   &kp DOLLAR            &kp PERCENT &kp CARET
   &kp LSHIFT   &kp APOS   &kp LS(N2) &kp EXCL   &kp NON_US_BSLH  &kp LPAR   &kp RPAR   &kp LS(NON_US_BSLH)   &kp DQT    &kp LS(N3)
                          	          &to DEF    &kp DEL          &kp SPACE  &to NUM
                        >;
                };

                num_layer {
// -----------------------------------------------------------------------------------------
// | ESC  |  F9  |  F10  |  F11  |  F12  |   |  MINUS  |  KP_N7  |  KP_N8  |  KP_N9  |  BSPC  |
// | LGUI |  F8  |  F7   |  F6   |  F5   |   |  COMMA  |  KP_N4  |  KP_N5  |  KP_N6  |  ENTER |
// | LCTRL|  F1  |  F2   |  F3   |  F4   |   |  KP_N0  |  KP_N1  |  KP_N2  |  KP_N3  |  DOT   |
//                       | DEF   |  BKSP |   |  SPC    |  NAV    |
                        bindings = <
   &kp ESC    &kp F9   &kp F10   &kp F11   &kp F12     &kp MINUS   &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp BSPC 
   &kp LGUI   &kp F8   &kp F7    &kp F6    &kp F5      &kp COMMA   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp ENTER
   &kp LCTRL  &kp F1   &kp F2    &kp F3    &kp F4      &kp KP_N0   &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp DOT  
                                 &to DEF   &kp BSPC    &kp SPACE   &to NAV
                        >;
                };

                nav_layer {
// -----------------------------------------------------------------------------------------
// | RESET  |        |        |    |    |   |  PSCRN  |  PG_UP  |  UP    |  PG_DN  |  BSPC  |
// | BT CLR | BT PRV | BT NXT |    |    |   |         |  LEFT   |  DOWN  |  RIGHT  |  ENTER |
// |        |        |        |    |    |   |         |         |        |         |  RESET |
//                            | DEF|    |   |         |         |
                        bindings = <
   &bootloader  &none        &none   &none   &none     &kp PSCRN   &kp PG_UP  &kp UP    &kp PG_DN  &kp BSPC
   &bt BT_CLR   &bt BT_PRV   &bt BT_NXT   &none   &none     &none       &kp LEFT   &kp DOWN  &kp RIGHT  &kp ENTER
   &none        &none        &none   &none   &none     &none       &none      &none     &none      &bootloader
                    	             &to DEF &none     &none       &none
                        >;
                };

                mod_layer {
// -----------------------------------------------------------------------------------------
// | TAB     |  ALT     |  CTRL     |  DEL       |    |   |   |   |   | K_SLEEP  | C_SLEEP  |
// | SK LGUI |  SK ALT  |  SK SHFT  |  SK LCTRL  |    |   |   |   |   |          |          |
// |         |          |           |            |    |   |   |   |   |          |          |
//                      |           |            |    |   |   |
                        bindings = <
   &kp TAB   &kp LALT   &kp LCTRL   &kp DEL     &trans    &trans  &trans  &trans  &kp K_SLEEP  &kp C_SLEEP
   &sk LGUI  &sk LALT   &sk LSHFT   &sk LCTRL   &trans    &trans  &trans  &trans  &trans       &trans     
   &slm SYM  &trans     &trans      &trans      &trans    &trans  &trans  &trans  &trans       &trans     
                    	            &trans      &trans    &trans  &trans
                        >;
                };
        };
};
